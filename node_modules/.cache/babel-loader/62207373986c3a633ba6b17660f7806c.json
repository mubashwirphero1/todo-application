{"ast":null,"code":"var _jsxFileName = \"D:\\\\Back Up\\\\Programing Hero\\\\Assignment\\\\Todo-APP-Typescript\\\\src\\\\pages\\\\TodosPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TodoForm } from \"../components/TodoInput\";\nimport { TodoList } from \"../components/TodoTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodosPage = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '');\n    setTodos(saved);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addHandler = title => {\n    const newTodo = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    };\n    setTodos(prev => [newTodo, ...prev]);\n  };\n\n  const toggleHandler = id => {\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        return { ...todo,\n          completed: !todo.completed\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeHandler = id => {\n    const shouldRemove = confirm('Are you sure you want to delete the item?');\n\n    if (shouldRemove) {\n      setTodos(prev => prev.filter(todo => todo.id !== id));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      onAdd: addHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      onToggle: toggleHandler,\n      onRemove: removeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 13\n  }, this);\n};\n\n_s(TodosPage, \"JPZTns5sUK6f8sNf0ff2EvpSbn0=\");\n\n_c = TodosPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosPage\");","map":{"version":3,"sources":["D:/Back Up/Programing Hero/Assignment/Todo-APP-Typescript/src/pages/TodosPage.tsx"],"names":["React","useState","useEffect","TodoForm","TodoList","TodosPage","todos","setTodos","saved","JSON","parse","localStorage","getItem","setItem","stringify","addHandler","title","newTodo","id","Date","now","completed","prev","toggleHandler","map","todo","removeHandler","shouldRemove","confirm","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAAQC,QAAR,QAAuB,yBAAvB;AACA,SAAQC,QAAR,QAAuB,yBAAvB;;AAKA,OAAO,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAU,EAAV,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAA5C,CAAd;AACAL,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACH,GAHQ,EAGN,EAHM,CAAT;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAgBR,KAAhB,CAA9B;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,QAAMS,UAAU,GAAIC,KAAD,IAAmB;AAClC,UAAMC,OAAc,GAAG;AACnBD,MAAAA,KAAK,EAAEA,KADY;AAEnBE,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFe;AAGnBC,MAAAA,SAAS,EAAE;AAHQ,KAAvB;AAKAd,IAAAA,QAAQ,CAACe,IAAI,IAAI,CAACL,OAAD,EAAU,GAAGK,IAAb,CAAT,CAAR;AACH,GAPD;;AASA,QAAMC,aAAa,GAAIL,EAAD,IAAgB;AAClCX,IAAAA,QAAQ,CAACe,IAAI,IACTA,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AACb,UAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhB,EAAoB;AAChB,eAAO,EACH,GAAGO,IADA;AAEHJ,UAAAA,SAAS,EAAE,CAACI,IAAI,CAACJ;AAFd,SAAP;AAIH;;AACD,aAAOI,IAAP;AACH,KARD,CADI,CAAR;AAUH,GAXD;;AAaA,QAAMC,aAAa,GAAIR,EAAD,IAAgB;AAClC,UAAMS,YAAY,GAAGC,OAAO,CAAC,2CAAD,CAA5B;;AACA,QAAID,YAAJ,EAAiB;AACbpB,MAAAA,QAAQ,CAACe,IAAI,IAAIA,IAAI,CAACO,MAAL,CAAYJ,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhC,CAAT,CAAR;AACH;AACJ,GALD;;AAOA,sBAAQ,QAAC,KAAD,CAAO,QAAP;AAAA,4BACJ,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEH;AAAjB;AAAA;AAAA;AAAA;AAAA,YADI,eAEJ,QAAC,QAAD;AAAU,MAAA,KAAK,EAAET,KAAjB;AAAwB,MAAA,QAAQ,EAAEiB,aAAlC;AAAiD,MAAA,QAAQ,EAAEG;AAA3D;AAAA;AAAA;AAAA;AAAA,YAFI;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAIH,CA7CM;;GAAMrB,S;;KAAAA,S","sourcesContent":["import React, {useState, useEffect } from 'react';\r\nimport {TodoForm} from \"../components/TodoInput\";\r\nimport {TodoList} from \"../components/TodoTable\";\r\nimport {ITodo} from \"../interfaces\";\r\n\r\ndeclare var confirm: (question: string) => boolean\r\n\r\nexport const TodosPage: React.FC = () => {\r\n    const [todos, setTodos] = useState<ITodo[]>([])\r\n\r\n    useEffect(() => {\r\n        const saved = JSON.parse(localStorage.getItem('todos') || '') as ITodo[]\r\n        setTodos(saved)\r\n    }, [ ])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify((todos)))\r\n    }, [todos ])\r\n\r\n    const addHandler = (title: string) => {\r\n        const newTodo: ITodo = {\r\n            title: title,\r\n            id: Date.now(),\r\n            completed: false\r\n        }\r\n        setTodos(prev => [newTodo, ...prev])\r\n    }\r\n\r\n    const toggleHandler = (id: number) => {\r\n        setTodos(prev =>\r\n            prev.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    }\r\n                }\r\n                return todo\r\n            }))\r\n    }\r\n\r\n    const removeHandler = (id: number) => {\r\n        const shouldRemove = confirm('Are you sure you want to delete the item?')\r\n        if (shouldRemove){\r\n            setTodos(prev => prev.filter(todo => todo.id !== id))\r\n        }\r\n    }\r\n\r\n    return (<React.Fragment>\r\n        <TodoForm onAdd={addHandler}/>\r\n        <TodoList todos={todos} onToggle={toggleHandler} onRemove={removeHandler}/>\r\n    </React.Fragment>)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}